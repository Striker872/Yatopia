From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: ishland <ishlandmc@yeah.net>
Date: Tue, 2 Feb 2021 23:51:45 +0800
Subject: [PATCH] fixup! Threaded WorldGen


diff --git a/src/main/java/net/minecraft/server/ChunkProviderServer.java b/src/main/java/net/minecraft/server/ChunkProviderServer.java
index 6320a4175f8d65ef3f633319a6392f05d472e621..d809f73ea5b81d6b389457c8ad7eb03b83e1a289 100644
--- a/src/main/java/net/minecraft/server/ChunkProviderServer.java
+++ b/src/main/java/net/minecraft/server/ChunkProviderServer.java
@@ -11,6 +11,7 @@ import java.util.Collections;
 import java.util.List;
 import java.util.Optional;
 import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.ConcurrentLinkedQueue;
 import java.util.concurrent.Executor;
 import java.util.function.BooleanSupplier;
 import java.util.function.Consumer;
@@ -19,6 +20,9 @@ import java.util.function.Supplier;
 import javax.annotation.Nullable;
 import com.destroystokyo.paper.exception.ServerInternalException;
 import it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap; // Paper
+import it.unimi.dsi.fastutil.objects.ObjectLinkedOpenHashSet;
+import it.unimi.dsi.fastutil.objects.ObjectSet;
+import it.unimi.dsi.fastutil.objects.ObjectSets;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
@@ -801,10 +805,27 @@ public class ChunkProviderServer extends IChunkProvider {
         return this.world;
     }
 
-    public boolean runTasks() {
-        return this.serverThreadQueue.executeNext();
+    // Yatopia start - reduce scheduling overhead
+    final ConcurrentLinkedQueue<Runnable> poiQueue = new ConcurrentLinkedQueue<>();
+    private boolean runPoiQueueNext() { // TODO flush poi queue?
+        try {
+            final Runnable runnable = poiQueue.poll();
+            if (runnable != null)
+                runnable.run();
+            return runnable != null;
+        } catch (Throwable t) {
+            t.printStackTrace();
+        }
+        return false;
     }
 
+    public boolean runTasks() {
+        boolean b = this.serverThreadQueue.executeNext();
+        if(runPoiQueueNext())
+            b = true;
+        return b;
+    } // Yatopia end
+
     public boolean tickDistanceManager() { // Paper - private -> public
         if (chunkMapDistance.delayDistanceManagerTick) return false; // Paper
         if (this.playerChunkMap.unloadingPlayerChunk) { MinecraftServer.LOGGER.fatal("Cannot tick distance manager while unloading playerchunks", new Throwable()); throw new IllegalStateException("Cannot tick distance manager while unloading playerchunks"); } // Tuinity
diff --git a/src/main/java/net/minecraft/server/WorldServer.java b/src/main/java/net/minecraft/server/WorldServer.java
index aa3302241de6b483d3048d12bacf24bf50967100..08c52d063ef566d64ec4b220b47345b43931511f 100644
--- a/src/main/java/net/minecraft/server/WorldServer.java
+++ b/src/main/java/net/minecraft/server/WorldServer.java
@@ -2551,7 +2551,7 @@ public class WorldServer extends World implements GeneratorAccessSeed {
         // Paper start
         BlockPosition blockposition1 = blockposition.immutableCopy();
         // Yatopia start - reduce scheduling overhead
-        this.getMinecraftServer().execute(() -> {
+            chunkProvider.poiQueue.add(() -> {
                 if (!optional.isPresent() && this.getPoiStorage().test(blockposition1, com.google.common.base.Predicates.alwaysTrue())) {
                     this.getPoiStorage().remove(blockposition1);
                 }
